package orange.controllers;

import orange.entities.Album;
import orange.entities.AlbumCategory;
import orange.entities.Comment;
import orange.entities.OrangeItem;
import orange.services.AlbumService;
import orange.services.CategoryService;
import orange.services.CommentService;
import orange.services.OrangeItemService;
import orange.user.CustomUser;
import orange.user.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.security.authentication.AnonymousAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.User;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.*;

@Controller
public class AlbumController {

    @Autowired
    private AlbumService albumService;
    @Autowired
    private CategoryService categoryService;
    @Autowired
    private UserService userService;
    @Autowired
    private OrangeItemService itemService;
    @Autowired
    private CommentService commentService;

    /**
     * View registered user own albums (available to add, delete, edit albums)
     *
     * @param model      - holds own user albums
     * @param pageNumber current view page number (pagination parameter)
     * @return - view of user own albums
     */
    @RequestMapping(value = "/albums/page/{pageNumber}", method = RequestMethod.GET)
    public String showAlbums(
            Model model,
            @PathVariable int pageNumber) {

        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
        if (auth instanceof AnonymousAuthenticationToken) {
            return "/login";
        }

        User user = (User) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
        String login = user.getUsername();
        CustomUser dbUser = userService.getUserByLogin(login);

        Page<Album> userAlbums = albumService.findUserAlbums(dbUser, pageNumber);
        int current = userAlbums.getNumber() + 1;
        int begin = Math.max(1, current - 5);
        int end = Math.min(begin + 10, userAlbums.getTotalPages());
        model.addAttribute("albums", userAlbums);
        model.addAttribute("beginIndex", begin);
        model.addAttribute("endIndex", end);
        model.addAttribute("currentIndex", current);
        model.addAttribute("totalAlbums", userAlbums.getTotalElements());

        model.addAttribute("login", login);

        return "/albums";
    }

    /**
     * View another registered user albums (without ability to edit or delete it, unless user has admin rights)
     *
     * @param login       - target user login
     * @param currentPage current view page number (pagination parameter)
     * @param model       - holds founded album and target user login
     * @return - view of target user albums
     */
    @RequestMapping(value = "/{login}/albums/page/{currentPage}", method = RequestMethod.GET)
    public String showUserAlbums(
            @PathVariable String login,
            @PathVariable int currentPage,
            Model model) {

        CustomUser dbUser = userService.getUserByLogin(login);
        model.addAttribute("login", login);

        if (dbUser == null) {
            return "/404";
        }

        Page<Album> userAlbums = albumService.findUserAlbums(dbUser, currentPage);
        int current = userAlbums.getNumber() + 1;
        int begin = Math.max(1, current - 5);
        int end = Math.min(begin + 10, userAlbums.getTotalPages());
        model.addAttribute("albums", userAlbums);
        model.addAttribute("beginIndex", begin);
        model.addAttribute("endIndex", end);
        model.addAttribute("currentIndex", current);
        model.addAttribute("totalAlbums", userAlbums.getTotalElements());
        model.addAttribute("login", login);
        model.addAttribute("currentPage", currentPage);

        return "/albums";
    }

    /**
     * Editing existing albums properties such as name, description, category
     *
     * @param model       holds information about album and category
     * @param albumUID    album UID (visible unique string id, generated by UUID class)
     * @param currentPage current view page number (pagination parameter)
     * @return view for editing album properties (if album have name and/or description its appropriate view fields
     * filled with this values)
     */
    @RequestMapping(value = "/albums/manage-album/{albumUid}/{currentPage}", method = RequestMethod.GET)
    public String manageAlbum(
            Model model,
            @PathVariable(value = "albumUid") String albumUID,
            @PathVariable int currentPage) {
        Album editedAlbum = albumService.getByUid(albumUID);
        model.addAttribute("album", editedAlbum);
        model.addAttribute("categories", categoryService.getAll());
        model.addAttribute("album_category", editedAlbum.getCategory().getName());
        model.addAttribute("currentPage", currentPage);

        return "manage_album";
    }

    /**
     * Adding new album
     *
     * @param model       holding albums categories list
     * @param currentPage current view page number (pagination parameter)
     * @return view for editing album properties
     */
    @RequestMapping(value = "/albums/manage-album/{currentPage}", method = RequestMethod.GET)
    public String manageAlbum(
            Model model,
            @PathVariable int currentPage) {
        model.addAttribute("categories", categoryService.getAll());
        model.addAttribute("currentPage", currentPage);

        return "manage_album";
    }

    /**
     * Adding new album or saving existing one after edit properties (name, description, category).
     * Performs check for album existing
     *
     * @param album_name     album name
     * @param descr          album description
     * @param album_category album category
     * @param albumUid       album UID (visible unique string id, generated by UUID class)
     * @param currentPage    current view page number (pagination parameter)
     * @return view of user albums
     */
    @RequestMapping(value = "/albums/album-add/{currentPage}", method = RequestMethod.POST)
    public String addAlbum(@RequestParam String album_name,
                           @RequestParam String descr,
                           @RequestParam(value = "group-selection") String album_category,
                           @PathVariable int currentPage,
                           @RequestParam(value = "albumUid") String albumUid,
                           Model model) {

        if (album_name.equals("")) {
            model.addAttribute("empty_name", true);

            return "redirect:/albums/page/" + currentPage;
        }

        AlbumCategory cat = categoryService.getByName(album_category);

        User user = (User) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
        String login = user.getUsername();
        CustomUser dbUser = userService.getUserByLogin(login);

        Album isExists = albumService.getByUid(albumUid);
        if (!descr.equals("") && descr.length() > 100) {
            descr = descr.substring(0, 100);
        }
        if (isExists != null) {
            isExists.setAlbumName(album_name);
            isExists.setAlbumDescr(descr);
            isExists.setCategory(cat);
            albumService.updateAlbum(isExists);
        } else {
            albumService.addAlbum(
                    new Album(getUUID(), dbUser, album_name, descr, cat, Calendar.getInstance().getTime()));
        }
        return "redirect:/albums/page/" + currentPage;
    }

    /**
     * Viewing all album's photos
     *
     * @param model      holds queried album and list of album items
     * @param albumUid   album UID (visible unique string id, generated by UUID class)
     * @param pageNumber current view page number (pagination parameter)
     * @return view
     */
    @RequestMapping(value = "/albums/view/{albumUid}/{pageNumber}", method = RequestMethod.GET)
    public String viewAlbum(Model model,
                            @PathVariable(value = "albumUid") String albumUid,
                            @PathVariable Integer pageNumber) {
        Album album = albumService.getByUid(albumUid);

        if (album == null) {
            return "/404";
        }

        Page<OrangeItem> page = itemService.findAllByAlbumId(album, pageNumber);
        int current = page.getNumber() + 1;
        int begin = Math.max(1, current - 5);
        int end = Math.min(begin + 10, page.getTotalPages());
        model.addAttribute("page", page);
        model.addAttribute("beginIndex", begin);
        model.addAttribute("endIndex", end);
        model.addAttribute("currentIndex", current);
        model.addAttribute("totalAlbums", page.getTotalElements());

        model.addAttribute("album", album);

        return "view-album";
    }

    /**
     * Add new photo to album
     *
     * @param model    holds queried album and list of album items
     * @param albumUID album UID (visible unique string id, generated by UUID class)
     * @param pic      MultipartFile photo to be added
     * @return view uploaded item
     * @throws IOException
     */
    @RequestMapping(value = "/album/add-pic", method = RequestMethod.POST)
    public String addPicToAlbum(
            Model model,
            @RequestParam(value = "album_uid") String albumUID,
            @RequestParam("photo") MultipartFile pic) throws IOException {

        Album album = albumService.getByUid(albumUID);

        if (pic.isEmpty()) {
            model.addAttribute("null_pic", true);
            return "redirect:/albums/view/" + album.getAlbumUID() + "/1";
        }

        User user = (User) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
        String login = user.getUsername();
        CustomUser dbUser = userService.getUserByLogin(login);

        File file = new File(pic.getOriginalFilename());
        BufferedImage img = ImageIO.read(pic.getInputStream());
        OrangeItem item = new OrangeItem();
        item.setuId(getUUID());
        item.setName(file.getName());
        item.setSize(pic.getSize());
        item.setWidth(img.getWidth());
        item.setHeight(img.getHeight());
        item.setType(getFileExtension(file));
        item.setUser(dbUser);
        item.setAlbum(album);
        item.setDescription("");
        item.setRating(0);
        item.setImage(pic.getBytes());
        item.setUploadDate(Calendar.getInstance().getTime());
        item.setViews(0);

        itemService.addOrangeItem(item);
        albumService.addAlbum(album);

        model.addAttribute("album", album);
        model.addAttribute("items", album.getAlbumItems());

        return "redirect:/albums/view/" + album.getAlbumUID() + "/1";
    }

    /**
     * Adding multiple items to album (available to registered users)
     *
     * @param albumUid album UID (visible unique string id, generated by UUID class)
     * @param model    used for handling empty upload (hold error flag to display warning)
     * @param pic      MultipartFile[] array of items to be added
     * @return view of uploaded items
     * @throws IOException
     */
    @RequestMapping(value = "/album/{albumUid}/add-multiple-pics", method = RequestMethod.POST)
    public String uploadMultiplePics(
            @PathVariable("albumUid") String albumUid,
            Model model, @RequestParam("photo") MultipartFile[] pic) throws IOException {

        if (pic.length > 10) {
            model.addAttribute("itemLimit", true);
            return "redirect:/albums/view/" + albumUid + "/1";
        }

        if (isEmptyUpload(pic)) {
            model.addAttribute("emptyUpload", true);
            return "redirect:/albums/view/" + albumUid + "/1";
        }

        User user = (User) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
        String login = user.getUsername();
        CustomUser dbUser = userService.getUserByLogin(login);

        Album currentAlbum = albumService.getByUid(albumUid);

        for (MultipartFile multipartFile : pic) {

            if (!isImageFile(multipartFile)) {
                model.addAttribute("nonimageSkipped", true);

                continue;
            }

            File file = new File(multipartFile.getOriginalFilename());
            BufferedImage img = ImageIO.read(multipartFile.getInputStream());

            OrangeItem item = new OrangeItem();
            item.setuId(getUUID());
            item.setName(file.getName());
            item.setSize(multipartFile.getSize());
            item.setWidth(img.getWidth());
            item.setHeight(img.getHeight());
            item.setType(getFileExtension(file));
            item.setUser(dbUser);
            item.setAlbum(currentAlbum);
            item.setDescription("");
            item.setRating(0);
            item.setImage(multipartFile.getBytes());
            item.setUploadDate(Calendar.getInstance().getTime());
            item.setViews(0);

            itemService.addOrangeItem(item);
        }
        albumService.updateAlbum(currentAlbum);

        return "redirect:/albums/view/" + albumUid + "/1";
    }

    /**
     * Delete photo from album
     *
     * @param albumUid     album's uid with photo to delete
     * @param itemUid      photo's uid to delete
     * @param currentIndex current page in album view for returning to same page after deleting
     * @return view of currently viewed album after deleting item
     */
    @RequestMapping(value = "/delete-item/{albumUid}/{itemUid}/{currentIndex}")
    public String deleteItem(
            @PathVariable String albumUid,
            @PathVariable String itemUid,
            @PathVariable int currentIndex
    ) {
        OrangeItem itemToDelete = itemService.getByUid(itemUid);

        itemToDelete.removeAllUserFromAddedList();

        itemService.deleteOrangeItem(itemToDelete);
        //detect current album page index after deleting photo
        Album album = albumService.getByUid(albumUid);
        int page = (album.getAlbumItems().size() - 1) / 12;
        if (page + 1 < currentIndex) {
            currentIndex--;
        }

        return "redirect:/albums/view/" + albumUid + "/" + currentIndex;
    }

    /**
     * Delete album
     *
     * @param albumUid     uid of deleting album
     * @param currentIndex pagination parameter which used after deleting for return to correct view page
     * @return albums view
     */
    @RequestMapping(value = "/delete-album/{albumUid}/{currentIndex}")
    public String deleteAlbum(
            @PathVariable String albumUid,
            @PathVariable int currentIndex
    ) {
        Album albumToDelete = albumService.getByUid(albumUid);
        for (OrangeItem item : albumToDelete.getAlbumItems()) {
            item.removeAllUserFromAddedList();
        }
        albumService.deleteAlbum(albumToDelete);

        return "redirect:/albums/page/" + currentIndex;
    }

    /**
     * View album photo on page (if photo have comments - loads only last 5 for preview)
     *
     * @param itemUid      uid for viewed item
     * @param model        holds either item already in user favorites list, if so - place a link to favorites
     * @param currentIndex pagination parameter
     * @return view of item
     */
    @RequestMapping(value = "/view-album-item/{itemUid}/{currentIndex}", method = RequestMethod.GET)
    public String viewAlbumItem(
            @PathVariable("itemUid") String itemUid,
            @PathVariable("currentIndex") Integer currentIndex,
            Model model) {
        OrangeItem item = itemService.getByUid(itemUid);

        if (item == null) {
            return "/404";
        }

        item.setViews(item.getViews() + 1);
        itemService.updateOrangeItem(item);
        model.addAttribute("item", item);
        model.addAttribute("currentIndex", currentIndex);
        if (item.getComments().size() > 0) {
            model.addAttribute("lastComments", commentService.findTop5ByOrangeItemOrderByCommentDateDesc(item));
        }

        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
        if (!(auth instanceof AnonymousAuthenticationToken)) {
            User user = (User) auth.getPrincipal();
            String login = user.getUsername();
            CustomUser dbUser = userService.getUserByLogin(login);
            model.addAttribute("favorited", item.isFavoritedByUser(dbUser));
        }
        if (item.getAlbum().getAlbumItems().size() > 8) {
            model.addAttribute("moreFromAlbum", itemService.getMoreItemFromAlbum(item.getAlbum()));
        }

        return "view-album-item";
    }

    /**
     * View album photo thumbnail with all comments loaded
     *
     * @param itemUid      photo uid
     * @param currentIndex pagination parameter
     * @param commentsPage pagination parameter
     * @param model        view
     * @return
     */
    @RequestMapping(value = "view-album-item/{itemUid}/{currentIndex}/all-comments/page/{commentsPage}",
            method = RequestMethod.GET)
    public String viewItemComments(
            @PathVariable String itemUid,
            @PathVariable int currentIndex,
            @PathVariable int commentsPage,
            Model model
    ) {
        OrangeItem item = itemService.getByUid(itemUid);

        if (item == null) {
            return "/404";
        }

        Page<Comment> page = commentService.findAllComments(item, commentsPage);

        int current = page.getNumber() + 1;
        int begin = Math.max(1, current - 5);
        int end = Math.min(begin + 10, page.getTotalPages());
        model.addAttribute("allComments", page);
        model.addAttribute("beginIndex", begin);
        model.addAttribute("endIndex", end);
        model.addAttribute("currentIndex", current);

        model.addAttribute("item", item);
        model.addAttribute("currentIndex", currentIndex);
        model.addAttribute("totalPages", page.getTotalElements());

        return "/view-album-item-all-comments";
    }

    /**
     * Posting comment to photo
     *
     * @param comment_text comment text
     * @param itemUid      item UID for which comment is posting
     * @param currentIndex pagination parameter
     * @return view of item with newly added comment
     */
    @RequestMapping(value = "/post-comment/{currentIndex}", method = RequestMethod.POST)
    public String postComment(
            @RequestParam String comment_text,
            @PathVariable("currentIndex") Integer currentIndex,
            @RequestParam String itemUid,
            Model model) {

        OrangeItem item = itemService.getByUid(itemUid);
        Comment comment = new Comment(item, comment_text, Calendar.getInstance().getTime());
        User user = (User) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
        String login = user.getUsername();

        comment.setAuthorLogin(login);
        comment.setCommentUID(getUUID());

        item.setViews(item.getViews() - 1);
        item.addComment(comment);

        commentService.saveComment(comment);
        model.addAttribute("currentIndex", currentIndex);

        return "redirect:/view-album-item/" + itemUid + "/" + currentIndex;
    }

    /**
     * Service method for empty upload array check
     *
     * @param check flag of empty array
     * @return whenever array is empty
     */
    private boolean isEmptyUpload(MultipartFile[] check) {
        int empty = 0;
        for (MultipartFile temp : check) {
            if (!temp.isEmpty()) {
                empty++;
            }
        }
        return empty == 0;
    }

    /**
     * Service method for generation UID
     *
     * @return generated UID
     */
    private String getUUID() {
        return UUID.randomUUID().toString();
    }

    /**
     * Service method for getting file extension
     *
     * @param file particular file
     * @return String representation of file extension
     */
    private String getFileExtension(File file) {
        String fileName = file.getName();
        if (fileName.lastIndexOf(".") != -1 && fileName.lastIndexOf(".") != 0)
            return fileName.substring(fileName.lastIndexOf(".") + 1);
        else return "";
    }

    private boolean isImageFile(MultipartFile file) {
        if (file == null || file.isEmpty()) {
            return false;
        }
        String contentType = file.getContentType();
        return contentType.equals("image/jpeg") ||
                contentType.equals("image/png") ||
                contentType.equals("image/gif");
    }
}
